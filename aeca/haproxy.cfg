global
    log /dev/log local0
    maxconn 1000
    daemon

defaults
    log global
    mode tcp
    option tcplog
    timeout connect 5s
    timeout client 1h
    timeout server 1h

# Мониторинг HAProxy
listen stats
    bind *:8181
    mode http
    stats enable
    stats uri /stats
    stats refresh 5s

# main frontend which proxys to the backends
frontend ca_front
    bind .52:443
    mode tcp
    default_backend ca_back

# round robin balancing between the various backends
backend ca_back
    mode tcp
    server main .48:443 check
    server clone .49:443 check backup

# va balancing - crl, delta, aia, ocsp
frontend va_front
    bind .52:8080
    mode http
    
    acl crl_url1 path_beg -i /crl
    acl crl_url2 path_end -i /crl
    
    acl delta_url1 path_beg -i /delta
    acl delta_url2 path_end -i /delta
    
    acl aia_url1 path_beg -i /aia
    acl aia_url2 path_end -i /aia
    
    acl ocsp_url1 path_beg -i /ocsp
    acl ocsp_url2 path_end -i /ocsp
    
    use_backend crl_backend if crl_url1 crl_url2
    use_backend delta_backend if delta_url1 delta_url2
    use_backend aia_backend if aia_url1 aia_url2
    use_backend ocsp_backend if ocsp_url1 ocsp_url2
    
backend crl_backend
    balance roundrobin
    mode http
    server proxy-crl-1 .52:9000
    server proxy-crl-2 .52:9001

backend delta_backend
    balance roundrobin
    mode http
    server proxy-delta-1 .52:9002
    server proxy-delta-2 .52:9003
    
backend aia_backend
    balance roundrobin
    mode http
    server proxy-aia-1 .52:9004
    server proxy-aia-2 .52:9005
    
backend ocsp_backend
    balance roundrobin
    mode http
    server proxy-ocsp-1 .52:9006
    server proxy-ocsp-2 .52:9007

# crl    
frontend proxy-crl1
    bind *:9000
    mode http
    use_backend crl1

backend crl1
    mode http
    http-request set-path /aecaCdp/api/v2/crl/get-crl/3
    server web-server1 .48:8080
    
frontend proxy-crl2
    bind *:9001
    mode http
    use_backend crl2

backend crl2
    mode http
    http-request set-path /aecaCdp/api/v2/crl/get-crl/1
    server web-server2 .49:8080

# delta    
frontend proxy-delta1
    bind *:9002
    mode http
    use_backend delta1

backend delta1
    mode http
    http-request set-path /aecaCdp/api/v2/crl/get-delta-crl/3
    server web-server1 .48:8080
    
frontend proxy-delta2
    bind *:9003
    mode http
    use_backend delta2

backend delta2
    mode http
    http-request set-path /aecaCdp/api/v2/crl/get-delta-crl/1
    server web-server2 .49:8080

# aia
frontend proxy-aia1
    bind *:9004
    mode http
    use_backend aia1

backend aia1
    mode http
    http-request set-path /aecaCdp/api/v2/aia/get-aia/4
    server web-server1 .48:8080
    
frontend proxy-aia2
    bind *:9005
    mode http
    use_backend aia2

backend aia2
    mode http
    http-request set-path /aecaCdp/api/v2/aia/get-aia/2
    server web-server2 .49:8080

# ocsp
frontend proxy-ocsp1
    bind *:9006
    mode http
    use_backend ocsp1

backend ocsp1
    mode http
    http-request set-path /aeca-va/ocsp
    server web-server1 .48:8080
    
frontend proxy-ocsp2
    bind *:9007
    mode http
    use_backend ocsp2

backend ocsp2
    mode http
    http-request set-path /aeca-va/ocsp
    server web-server2 .49:8080

# PostgreSQL frontend (клиенты подключаются к VIP:5432)
frontend postgres_front
    bind *:5432
    default_backend postgres_back

# Backend Patroni (ищем мастера)
backend postgres_back
    mode tcp

    # Активируем HTTP healthchecks
    option httpchk

    # Отправляем HTTP GET к Patroni API /role
    http-check send meth GET uri /role ver HTTP/1.1 hdr Host .41

    # Проверяем, что в теле ответа есть "primary"
    http-check expect string "primary"

    # Указываем Patroni сервера
    server patroni1 .41:5432 check port 8008 inter 2s fall 2 rise 2
    server patroni2 .42:5432 check port 8008 inter 2s fall 2 rise 2 backup
